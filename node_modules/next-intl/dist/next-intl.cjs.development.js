'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var router = require('next/router');
var React = _interopDefault(require('react'));
var useIntl = require('use-intl');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function NextIntlProvider(_ref) {
  var _useRouter;

  var locale = _ref.locale,
      rest = _objectWithoutPropertiesLoose(_ref, ["locale"]);

  // The router can be undefined if used in a context outside
  // of Next.js (e.g. unit tests, Storybook, ...)
  var nextLocale = (_useRouter = router.useRouter()) == null ? void 0 : _useRouter.locale;

  if (!locale && nextLocale) {
    locale = nextLocale;
  }

  if (!locale) {
    throw new Error( "Couldn't determine locale. Please make sure you use internationalized routing or alternatively pass an explicit locale to `NextIntlProvider`." );
  }

  return React.createElement(useIntl.IntlProvider, Object.assign({
    locale: locale
  }, rest));
}

Object.keys(useIntl).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return useIntl[k];
    }
  });
});
exports.NextIntlProvider = NextIntlProvider;
//# sourceMappingURL=next-intl.cjs.development.js.map
